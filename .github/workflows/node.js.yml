# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      testShards: ${{ steps.shard_test_step.outputs.test_shards }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build --if-present
      - name: Get changed files and write the outputs to a JSON file
        id: changed-files-write-output-files-json
        uses: tj-actions/changed-files@v44
        with:
          json: true
          write_output_files: true
      - name: Verify the contents of the .github/outputs/all_changed_and_modified_files.json file
        run: |
          cat .github/outputs/all_changed_and_modified_files.json
      - name: Get test cases and duration
        id: get_test_data
        run: |
          # Call the external API to get relevant tests for a given list of changed files
          test_suite=$(curl -X GET https://api.github.com/users/mralexgray/repos -H "Content-Type: application/json") #-d @.github/outputs/all_changed_and_modified_files.json)
          touch test_data.json
          echo "
          [
            {
              \"test\": \"name_1\",
              \"duration\": 5
              },
              {
                \"test\": \"name_2\",
                \"duration\": 10
              }
            ]" > test_data.json
          cat test_data.json
      - name: Shard tests
        id: shard_test_step
        run: |
          # Invoke the shardinbg script passing result of previous call to shard the test cases
          test_Shard_data=$(node .github/workflows/sharding.js "$(<test_data.json)" 7)
          echo "$test_Shard_data"
          echo "test_shards=$test_Shard_data" >> $GITHUB_OUTPUTS.test_shards
  playwright-tests:
    # source: https://playwright.dev/docs/test-sharding
    needs: [build]
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testShard: ${{ fromJSON(needs.build.outputs.testShards) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test -g ${{matrix.testShard.tests}}

      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.testShard.index }}
          path: blob-report
          retention-days: 1
  merge-reports:
    # Merge reports after playwright-tests, even if some shards have failed
    if: ${{ !cancelled() }}
    needs: [playwright-tests]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install dependencies
      run: npm ci

    - name: Download blob reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-blob-reports
        pattern: blob-report-*
        merge-multiple: true

    - name: Merge into HTML Report
      run: npx playwright merge-reports --reporter html ./all-blob-reports

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: html-report--attempt-${{ github.run_attempt }}
        path: playwright-report
        retention-days: 14